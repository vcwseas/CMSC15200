/* Victor Cheung, vcheung */
/* CS152, Winter 2014 */
/* Lab 1 */
#include <stdio.h>

long int expt(int a, unsigned int n);
long int ss(int a, unsigned int n);
int ssm(int a, unsigned int n, unsigned int m);

int main() 
{
	/* tests for expt */
	printf("Tests for expt\n");
	printf("%ld\n", expt(2,10));	/* 1024 */
	printf("%ld\n", expt(8,9));		/* 134217728 */
	printf("%ld\n", expt(99,4));	/* 96059601 */
	printf("%ld\n", expt(45,5));	/* 184528125 */
	printf("Tests for ss\n");
	printf("%ld\n", ss(2,10));		/* 1024 */
	printf("%ld\n", ss(8,9));		/* 134217728 */
	printf("%ld\n", ss(99,4));		/* 96059601 */
	printf("%ld\n", ss(45,5));		/* 184528125 */
	printf("Tests for ssm\n");
	printf("%d\n", ssm(2,10, 1000));	/* 24 */
	printf("%d\n", ssm(8,9, 1000));		/* 728 */
	printf("%d\n", ssm(99,4, 100));		/* 1 */
	printf("%d\n", ssm(45,5, 10000));	/* 8125 */

	grader_main();
	return 0;
}

long int expt(int a, unsigned int n)
{

  // #grader: It's a good idea to use opening and closing braces
  // for all control structures. 
	if (n == 0)
		return 1;
	// #grader: The conditional below is not needed
	else if (n == 1)
		return a;
	else return a * expt(a, n - 1);
}

long int ss(int a, unsigned int n)
{
	if (n == 0)
		return 1;

	else if (n % 2 == 0)
	{
		long int temp = ss(a, n/2);
		return temp * temp;
	}
	// #grader: Generally, the 'else' and 'else if' statements belong on the
	// same line as the closing brace of the 'if' with which they are associated
	else
		return a * ss(a, n - 1);
}


int ssm(int a, unsigned int n, unsigned int m)
{
	if (n == 0)
		return 1;
	else if (n % 2 == 0)
	{
	  // #grader: You should be calling 'ssm' recursively here, not 'ss'
		long int temp = ss(a, n/2);
		return (temp * temp) % m;
	}
	else
	  // #grader: Call 'ssm', not 'ss'
		return a * ss(a, n - 1) % m;
}


int grader_main()
{
  printf("\n\n\n");
  /* --- expt tests --- */
  printf("testing expt...\n");
  printf("expt(2,0):\t%ld (1 expected)\n",expt(2,0));
  printf("expt(2,3):\t%ld (8 expected)\n",expt(2,3));
  printf("expt(22,7):\t%ld (2494357888 expected)\n",expt(22,7));

  /* --- ss tests --- */
  printf("testing ss...\n");
  printf("ss(2,0):\t%ld (1 expected)\n",ss(2,0));
  printf("ss(2,3):\t%ld (8 expected)\n",ss(2,3));
  printf("ss(22,7):\t%ld (2494357888 expected)\n",ss(22,7));

  /* --- ssm tests --- */
  printf("testing ssm...\n");
  printf("ssm(2,3,4):\t%d (0 expected)\n",ssm(2,3,4));
  printf("ssm(33,44,55):\t%d (11 expected)\n",ssm(33,44,55));
  printf("ssm(88,99,111):\t%d (43 expected)\n",ssm(88,99,111));
  printf("ssm(111,222,99):\t%d (45 expected)\n",ssm(111,222,99));

  return 0;
}


/* grader evaluation */

/* === correctness === */
/* expt          : 12/12 */
/* ss            : 15/15 */
/* ssm           : 11/15 */ // Calls 'ss' rather than 'ssm'

/* === style + svn === */
/* code layout            :  4/ 6 */ // Brace placement; code indented too far from left
/* well-named identifiers :  6/ 6 */
/* clarity                :  6/ 6 */
/* svn                    :  4/ 4 */

/* _total-score_ : 58/64 */

/* graded by Luke Peeler */
