/* Victor Cheung, vcheung */
/* CS 152, Winter 2014 */
/* Homework 1 */

#include <stdio.h>
#include <math.h>

//#grader: your function comments should describe what the function does, and its return values

/*
 *
 *
 * problem 1
 *
 *
 */
// recursive implementation
// unsigned int gcd(unsigned int a, unsigned int b)
// {
// 	if (b > a)
// 		return gcd(b, a);
// 	else if (b)
// 		return gcd(b, a % b);
// 	else
// 		return a;
// }

unsigned int gcd(unsigned int a, unsigned int b)
{
	if (b > a)
		return gcd(b, a);

	unsigned int temp;
	while (b)
	{
		temp = a;
		a = b;
		b = temp % b;
	}
	return a;
}

/*
 *
 *
 * problem 2
 *
 *
 */
double area_pipe(double inner_radius, double length, double thickness)
{
	double outer_radius = inner_radius + thickness;
	double ir2 = inner_radius * inner_radius;
	double or2 = outer_radius * outer_radius;

	return (2 * M_PI * inner_radius * length)
		+  (2 * M_PI * outer_radius * length)
		+  2 * (or2 * M_PI - ir2 * M_PI);
}

/*
 *
 *
 * problem 3
 *
 *
 */

int adj(unsigned int m, unsigned int y)
{
	int leap = (y % 4 == 0 && y % 100 != 0) || (y % 400 == 0);
	switch (m)
	{
		case 1: return leap ? 0 : 1;
		case 2: return leap ? 3 : 4;
		case 3: return 4;
		case 4: return 0;
		case 5: return 2;
		case 6: return 5;
		case 7: return 0;
		case 8: return 3;
		case 9: return 6;
		case 10: return 1;
		case 11: return 4;
		case 12: return 6;
	}
}

// #grader: does not pass grader's test (-5)
int dow(unsigned int d, unsigned int m, unsigned int y)
{
	return ((y - 1900) + adj(m, y) + d + y/4) % 7;
}



/*
 *
 *
 * problem 4
 *
 *
 */

 int sumDigitsDoubled(int n)
{
	n = n * 2;
	return n % 10 + (n / 10) % 10;
}


int luhnAux(unsigned long int num, int check, int sum, int d)
{

	if (num == 0)
		return ((10 - (sum % 10))) % 10 == check;
	else
		return luhnAux(num / 10, check,
			sum + (d ? sumDigitsDoubled(num % 10) : num % 10), !d);
}

int luhn(unsigned long int num)
{
	return luhnAux(num / 10, num % 10, 0, 1);
}

/*
 *
 *
 *
 * Main
 *
 */

/* evaluation */

/* gcd            10/10 */
/* area_pipe      20/20 */
/* dow            15/20 */
/* luhn           20/20 */

/* code layout     6/ 6 */
/* clarity         4/ 6 */

/* svn             4/ 4 */

/* _total-score_  79/86 */

/* graded by David Kim */


void GRADERS_TESTS()
{
  // *** graders' tests *** 
  printf("****** GRADERS' TESTS\n");
  printf("actual-result [expected-result]\n\n");

  // * tests for gcd 
  printf("****** testing gcd\n\n");
  printf("%d [1]\n", gcd(2,3));
  printf("%d [1]\n", gcd(3,2));
  printf("%d [7]\n", gcd(7,77));
  printf("%d [9]\n", gcd(9,99));
  putchar('\n');

  // tests for area_pipe 
  printf("****** testing area_pipe\n\n");
  printf("%f [37.699...]\n", area_pipe(1.0,1.0,1.0));
  printf("%f [760.265...]\n", area_pipe(5.0,10.0,1.0));
  printf("%f [1.2566...]\n", area_pipe(0.2,0.3,0.1));
  
  putchar('\n');

  // tests for dow 

  printf("****** testing dow\n\n");

  printf("%d [1]\n", dow(1,1,1990));
  printf("%d [4]\n", dow(2,1,1990));  
  printf("%d [4]\n", dow(3,1,1990));  
  printf("%d [0]\n", dow(4,1,1990));  
  printf("%d [2]\n", dow(5,1,1990));  
  printf("%d [5]\n", dow(6,1,1990));  
  printf("%d [0]\n", dow(7,1,1990));  
  printf("%d [3]\n", dow(8,1,1990));  
  printf("%d [6]\n", dow(9,1,1990));  
  printf("%d [1]\n", dow(10,1,1990));  
  printf("%d [4]\n", dow(11,1,1990));  
  printf("%d [6]\n", dow(12,1,1990));  

  printf("%d [4]\n", dow(1,1,2004));
  printf("%d [0]\n", dow(2,1,2004));  
  printf("%d [1]\n", dow(3,1,2004));  
  printf("%d [4]\n", dow(4,1,2004));  
  printf("%d [6]\n", dow(5,1,2004));  
  printf("%d [2]\n", dow(6,1,2004));  
  printf("%d [4]\n", dow(7,1,2004));  
  printf("%d [0]\n", dow(8,1,2004));  
  printf("%d [3]\n", dow(9,1,2004));  
  printf("%d [5]\n", dow(10,1,2004));  
  printf("%d [1]\n", dow(11,1,2004));  
  printf("%d [3]\n", dow(12,1,2004));  

  putchar('\n');

  // tests for luhn 
  printf("****** testing luhn\n");
  printf("%d [1]\n", luhn(18929));
  printf("%d [0]\n", luhn(18928));
  printf("%d [1]\n", luhn(2222222));
  printf("%d [0]\n", luhn(3333334));

  return;
}

int main()
{
  GRADERS_TESTS();
  return 0;
}
